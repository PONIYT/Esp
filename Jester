-- ESPModule.lua

local ESPModule = {}
ESPModule.__index = ESPModule

-- Default settings
local defaultSettings = {
    boxEnabled = true,
    tracerEnabled = true,
    espColor = Color3.fromRGB(255, 0, 0),
    healthBarEnabled = true
}

-- Create new ESP
function ESPModule.new()
    local self = setmetatable({}, ESPModule)
    
    -- Store settings and ESP components
    self.settings = defaultSettings
    self.espComponents = {}

    -- Setup ESP components
    self:createESPComponents()
    
    -- Update loop
    game:GetService("RunService").RenderStepped:Connect(function()
        self:updateESP()
    end)

    return self
end

-- Create ESP components for players
function ESPModule:createESPComponents()
    self.espComponents = {}
    for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
        if player.Character then
            self.espComponents[player] = {
                Box = Drawing.new("Square"),
                Tracer = Drawing.new("Line"),
                HealthBar = {
                    Outline = Drawing.new("Square"),
                    Health = Drawing.new("Square")
                }
            }
            local components = self.espComponents[player]
            components.Box.Thickness = 1
            components.Box.Transparency = 1
            components.Box.Visible = false
            components.Box.Color = self.settings.espColor

            components.Tracer.Thickness = 1
            components.Tracer.Transparency = 1
            components.Tracer.Visible = false
            components.Tracer.Color = self.settings.espColor
            
            components.HealthBar.Outline.Thickness = 1
            components.HealthBar.Outline.Transparency = 1
            components.HealthBar.Outline.Visible = false
            components.HealthBar.Outline.Color = Color3.fromRGB(0, 0, 0)

            components.HealthBar.Health.Thickness = 1
            components.HealthBar.Health.Transparency = 1
            components.HealthBar.Health.Visible = false
            components.HealthBar.Health.Color = self.settings.espColor
        end
    end
end

-- Update ESP components
function ESPModule:updateESP()
    local camera = workspace.CurrentCamera

    for player, components in pairs(self.espComponents) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local hrpPosition, onScreen = camera:WorldToViewportPoint(hrp.Position)
            local localPlayerPosition = camera:WorldToViewportPoint(camera.CFrame.p)

            if onScreen then
                local screenWidth, screenHeight = camera.ViewportSize.X, camera.ViewportSize.Y
                local factor = 1 / (hrpPosition.Z * math.tan(math.rad(camera.FieldOfView * 0.5)) * 2) * 100
                local width, height = math.floor(screenHeight / 25 * factor), math.floor(screenWidth / 27 * factor)

                -- Box properties
                if self.settings.boxEnabled then
                    components.Box.Size = Vector2.new(width, height)
                    components.Box.Position = Vector2.new(hrpPosition.X - width / 2, hrpPosition.Y - height / 2)
                    components.Box.Color = self.settings.espColor
                    components.Box.Visible = true
                else
                    components.Box.Visible = false
                end

                -- Tracer properties
                if self.settings.tracerEnabled then
                    components.Tracer.From = Vector2.new(localPlayerPosition.X, localPlayerPosition.Y)
                    components.Tracer.To = Vector2.new(hrpPosition.X, hrpPosition.Y + height / 2)
                    components.Tracer.Color = self.settings.espColor
                    components.Tracer.Visible = true
                else
                    components.Tracer.Visible = false
                end

                -- Health Bar properties
                if self.settings.healthBarEnabled then
                    local humanoid = player.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        local healthBarHeight = height
                        local healthBarWidth = 5
                        local healthFraction = humanoid.Health / humanoid.MaxHealth

                        components.HealthBar.Outline.Size = Vector2.new(healthBarWidth, healthBarHeight)
                        components.HealthBar.Outline.Position = Vector2.new(hrpPosition.X - healthBarWidth - 2, hrpPosition.Y - height / 2)
                        components.HealthBar.Outline.Visible = true

                        components.HealthBar.Health.Size = Vector2.new(healthBarWidth - 2, healthBarHeight * healthFraction)
                        components.HealthBar.Health.Position = Vector2.new(hrpPosition.X - healthBarWidth + 1, hrpPosition.Y - height / 2 + height * (1 - healthFraction))
                        components.HealthBar.Health.Color = self.settings.espColor
                        components.HealthBar.Health.Visible = true
                    end
                else
                    components.HealthBar.Outline.Visible = false
                    components.HealthBar.Health.Visible = false
                end
            else
                components.Box.Visible = false
                components.Tracer.Visible = false
                components.HealthBar.Outline.Visible = false
                components.HealthBar.Health.Visible = false
            end
        else
            components.Box.Visible = false
            components.Tracer.Visible = false
            components.HealthBar.Outline.Visible = false
            components.HealthBar.Health.Visible = false
        end
    end
end

-- Set settings
function ESPModule:setSettings(newSettings)
    for key, value in pairs(newSettings) do
        if self.settings[key] ~= nil then
            self.settings[key] = value
        end
    end
end

-- Set color
function ESPModule:setColor(color)
    self.settings.espColor = color
    for _, components in pairs(self.espComponents) do
        components.Box.Color = color
        components.Tracer.Color = color
        components.HealthBar.Outline.Color = color
        components.HealthBar.Health.Color = color
    end
end

return ESPModule
